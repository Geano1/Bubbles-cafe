Here’s how to securely implement Google and Apple sign-in for your website using Firebase Authentication.

1️⃣ Set Up Firebase
	1.	Go to Firebase Console
	2.	Create a new project
	3.	Enable Authentication:
	•	Navigate to Build → Authentication → Sign-in Method
	•	Enable Google Sign-in and Apple Sign-in
	4.	Get Firebase Config (from Project Settings → General)

2️⃣ Install Firebase in Your Project

Run this in your terminal:

npm install firebase

3️⃣ Initialize Firebase

Create a new file firebase.js and add:

import { initializeApp } from "firebase/app";
import { getAuth, GoogleAuthProvider, signInWithPopup, OAuthProvider } from "firebase/auth";

// Your Firebase config
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);

export { auth, GoogleAuthProvider, signInWithPopup, OAuthProvider };

4️⃣ Google Sign-In Logic

Create auth.js and add:

import { auth, GoogleAuthProvider, signInWithPopup } from "./firebase";

const googleProvider = new GoogleAuthProvider();

export const signInWithGoogle = async () => {
  try {
    const result = await signInWithPopup(auth, googleProvider);
    const user = result.user;
    console.log("Google Sign-In Success:", user);
    return user;
  } catch (error) {
    console.error("Google Sign-In Error:", error);
    throw error;
  }
};

5️⃣ Apple Sign-In Logic

import { auth, OAuthProvider, signInWithPopup } from "./firebase";

const appleProvider = new OAuthProvider("apple.com");

export const signInWithApple = async () => {
  try {
    const result = await signInWithPopup(auth, appleProvider);
    const user = result.user;
    console.log("Apple Sign-In Success:", user);
    return user;
  } catch (error) {
    console.error("Apple Sign-In Error:", error);
    throw error;
  }
};

6️⃣ Frontend UI for Sign-In Buttons

In your component:

import { signInWithGoogle, signInWithApple } from "../auth";
import { Button } from "@/components/ui/button";
import { Apple, LogIn } from "lucide-react";

const SignInButtons = () => {
  return (
    <div className="flex flex-col gap-4">
      <Button onClick={signInWithGoogle} className="bg-red-600 text-white px-6 py-3">
        <LogIn className="mr-2" /> Sign in with Google
      </Button>
      <Button onClick={signInWithApple} className="bg-black text-white px-6 py-3">
        <Apple className="mr-2" /> Sign in with Apple
      </Button>
    </div>
  );
};

export default SignInButtons;

7️⃣ Secure Session Handling

Use Firebase’s built-in session handling:

import { auth } from "./firebase";
import { useEffect, useState } from "react";

export const useAuth = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((currentUser) => {
      setUser(currentUser);
    });

    return () => unsubscribe();
  }, []);

  return user;
};

Usage in a component:

const user = useAuth();
if (user) {
  console.log("User is signed in:", user.displayName);
}

8️⃣ Logout Logic

import { auth } from "./firebase";

export const signOutUser = async () => {
  try {
    await auth.signOut();
    console.log("User signed out successfully");
  } catch (error) {
    console.error("Error signing out:", error);
  }
};

✅ Now your website has secure Google and Apple sign-in!
Do you need any additional security layers like reCAPTCHA, JWT handling, or database integration?